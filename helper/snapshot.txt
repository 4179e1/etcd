- main snap
raftNode {
    ... 
    snapshotter         *snap.Snapshotter
    snapshotterReady    chan *snap.Snapshotter
    ...
}

newRaftNode():
  |  rc = &aftNode {
  |      snapshotterReady : make (chan *snap.Snapshotter, 1)
  |  }
  |- go rc.startRaft()
  |  |- os.Mkdir (rc.sanpdir)
  |  |- rc.snapshotter = snap.New (zap.NewExample(), rc.snapdir) //zap 是一个*结构化*的logging library
  |  |- rc.snapshotterReady <- rc.snapshotter


- raftpb
type ConfState struct {
	Nodes            []uint64 `protobuf:"varint,1,rep,name=nodes" json:"nodes,omitempty"`
	Learners         []uint64 `protobuf:"varint,2,rep,name=learners" json:"learners,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

type SnapshotMetadata struct {
	ConfState        ConfState `protobuf:"bytes,1,opt,name=conf_state,json=confState" json:"conf_state"`
	Index            uint64    `protobuf:"varint,2,opt,name=index" json:"index"`
	Term             uint64    `protobuf:"varint,3,opt,name=term" json:"term"`
	XXX_unrecognized []byte    `json:"-"`
}

type Snapshot struct {
	Data             []byte           `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Metadata         SnapshotMetadata `protobuf:"bytes,2,opt,name=metadata" json:"metadata"`
	XXX_unrecognized []byte           `json:"-"`
}

- snappb
type Snapshot struct {
	Crc              uint32 `protobuf:"varint,1,opt,name=crc" json:"crc"`
	Data             []byte `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}


- etcdserver/api/snap

func New(lg *zap.Logger, dir string) *sanpshotter
func (s *Snapshotter) SaveSnap (snapshot *raftpb.Snapshot) error
|- s.save()
|  |- fname := <snapshot.Metadata.Term>-<snapshot.Metadata.Index>.snap
|  |- b = pbutil.MustMarshal(snapshot)
|  |- crc = crc32 (b)
|  |- snap = snappb.Snapshot (Crc: crc, Data b)
|  |- d = snap.Marshal()
|  |- pioutil.WriteAndSyncFile (d)
  
func (s *Snapshotter) Load()
|- names = snapNames() // find snapshot files with extension .snap
|  loadSnap (names) // a loop, break once a snapshot were loaded successfully
|  |- snap = Read()  // rename .snap to .broken when failed  
|  |  |-  b = ioutil.ReadFile()
|  |  |-  serializedSnap =  snappb.Unmarshal (b) 
|  |  |-  check serializedSnap CRC
|  |  |-  snap = snap.Unmarshal (serialized.Data)
|  |  |-  return snap