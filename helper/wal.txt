See: 
https://my.oschina.net/fileoptions/blog/1825531
https://blog.zhesih.com/2017/10/03/the-wal-files-in-etcd-v3/

Reference: 
https://work.tinou.com/2012/09/write-ahead-log.html

- wal/walpb/record.pb.go

Type: 
	metadataType int64 = iota + 1
	entryType
	stateType
	crcType
	snapshotType

type Record struct {
	Type             int64  `protobuf:"varint,1,opt,name=type" json:"type"`
	Crc              uint32 `protobuf:"varint,2,opt,name=crc" json:"crc"`
	Data             []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

type Snapshot struct {
	Index            uint64 `protobuf:"varint,1,opt,name=index" json:"index"`
	Term             uint64 `protobuf:"varint,2,opt,name=term" json:"term"`
	XXX_unrecognized []byte `json:"-"`
}

- wal/wal.go
type WAL struct {
	lg *zap.Logger

	dir string // the living directory of the underlay files

	// dirFile is a fd for the wal directory for syncing on Rename
	dirFile *os.File

	metadata []byte           // metadata recorded at the head of each WAL
	state    raftpb.HardState // hardstate recorded at the head of WAL

	start     walpb.Snapshot // snapshot to start reading
	decoder   *decoder       // decoder to decode records
	readClose func() error   // closer for decode reader

	mu      sync.Mutex
	enti    uint64   // index of the last entry saved to the wal
	encoder *encoder // encoder to encode records

	locks []*fileutil.LockedFile // the locked files the WAL holds (the name is increasing)
	fp    *filePipeline
}

- 创建<waldir>.tmp 目录，并在下面创建<seq>-<index>.wal命名的wal文件, 带上文件锁
- 创建WAL 对象
- 创建encoder对象
- encoder写入metadata
- encoder写入空的walpb.Snapshot
- <waldir>.tmp 重命名为<waldir>
  - 创建filePipeline 0.tmp 1.tmp

func Create (lg *zap.Logger, dirpath string, metadata []byte) (*WAL, error)
|- Exist (dirpath)
|- tmpdirpath := filepath.Clean(dirpath) + ".tmp"
|- fileutil.CreateDirAll (tmpdirpath)
|- p := filepath.Join (tmpdirpath, walName(0, 0))
|- f := fileutil.LockFile (p, s.O_WRONLY|os.O_CREATE, fileutil.PrivateFileMode) // syscall.Flock()
|- f.Seek (0, io.SeekEnd) // go to the end of the file, but why? shouldn't it empty?
|- fileutil.Preallocate(f.File, SegmentSizeBytes, true)
|- w := &WAL {...}
|- w.encoder := newFileEncoder (f.File, prevCrc : 0)
|  |- offset := f.Seek (0, io.SeekCurrent)    // get current offset
|  |- newEncoder (f, prevCrc, pageOffset) 
|     |- see below
|- w.saveCrc(0)
|  |- w.encoder.encode(&walpb.Record{Type: crcType, Crc: prevCrc}) // TODO: what?
|- w.locks.append (f)               //<--- it's a lock list
|- w.encoder.encode(&walpb.Record{Type: metadataType, Data: metadata})
|- w.SaveSnapshot(walpb.Snapshot{}) //TODO
|  |- b:= pbutil.MustMarshal (&e)
|  |- w.mu.Lock()
|  |- rec := &walpb.Record {Type: snapshotType, Data: b}
|  |- w.encoder.encode (rec)
|  |- w.sync()
|     |- w.encoder.flush()
|     |- fileutil.Fdatasync (w.tail().File)
|        |- Fsync (f)
|        |- syscall.Syscall (syscall.SYS_FCNT, f.Fd(), uintptr(syscall.F_FULLFSYNC), uintptr(0))
|- w = w.renameWAL (tmpdirpath)
|  |- os.RemoveAll (w.dir) // the dir without ".tmp"
|  |- os.Rename (tmpdirpath, w.dir) // rename won't work for locked file on windows,
|  |  - w.renameWALUnlock (tmpdirapth) // call wal.renameWalUnlock() instead, that's close, rename, open
|  |    |- w.Close()
|  |       |- w.sync()
|  |    |- os.Rename (tmpdirpath, w.dir)
|  |    |- newWal := Open (w.lg, w.dir, walpb.Sanpshot{})
|  |    |- newWal.ReadAll()
|  |    |- return newWAL
|  |- w.fp = newFilePipeline (w.lg, w.dir, SegmentSizeBytes)
|  |- w.dirFile = fileutil.OpenDir (w.dir)
|- //directory was renamed; sync parent dir to persist rename...
|- //That's open parent dir, fsync, close


// Open opens the WAL at the given snap.
// The snap SHOULD have been previously saved to the WAL, or the following
// ReadAll will fail.
func Open(lg *zap.Logger, dirpath string snap walpb.Snapshot) (*WAL, error)
|- w := openAtIndex (lg, dirpath, snap, write: true)
|  |- names := readWALNanmes(ld, dirpath) // find <seq>-<index>.wal, ignore .tmp files
|  |- nameIndex := searchIndex (names, snap.Index) // find <seq>-<index>.wal whose <index> > snap.Index
|  |- make 3 slice io.ReadClosed, io.Reader, *fileutil.LockedFile, append the matched .wal above
|  |- w := &WAL {start: snap, decoder: newDecoder (rs...), readClose: closer, locks: ls, ...}
|  |- write only: w.fp = newFilePipeline()
|- w.dirFile = fileutil.OpenDIr (w.dir)
|- return w

func (w *WAL) Save (st raftpb.HardState, ents []raftpb.Entry) error
|- mustSync = raft.MustSync (st, w.state, len (ents)) // check whether a sync() required
|- w.saveEntry (&ents[*])
|  |- b := pbutil.MustMarshal (e)
|  |- rec := &walpb.Record {entType, b}
|  |- w.encoder.encode (rec)
|  |- w.enti = e.Index
|- w.saveState (&st)
|  |- w.encode (stateType) // long story short
|- if not cut off (cur offset < SegmentSizeBytes 64MB), try w.sync()
|- else return w.cut()
|  |- // cut closes current file written and creates a new one ready to append.
|  |- // cut first creates a temp wal file and writes necessary headers into it.
|  |- // Then cut atomically rename temp wal file to a wal file.
|  |- get cur off set, Truncate, sync
|  |- fpath:= w.dir + walName (w.seq() + 1, w.enti + 1)
|  |- w.locks.append (w.fp.Open()) // from tmp file, append one to locks
|  |- w.encoder := newFileEncoder
|  |- w.encoder.encode (&walpb.Record{metadataType})
|  |- w.saveState (&st)
|  |- w.sync()
|  |- Rename ({0,1}.tmp ===> fpath (<seq>-<index>.wal))
|  |- Close(), and reopen as using new path... and a newFileEncoder()...

// After ReadAll, the WAL will be ready for appending new records.
func (w *WAL) ReadAll() (metadata []byte, state raftpb.HardState, ents []raftpb.Entry, err error)
|- TODO too complicate, don't understand



- wal/file_pipeline.go
type filePipeline struct {
	lg *zap.Logger

	// dir to put files
	dir string
	// size of files to make, in bytes
	size int64
	// count number of files generated
	count int

	filec chan *fileutil.LockedFile
	errc  chan error
	donec chan struct{}
}

(fp *filePipeline) Open () (f *fileutil.LockedFile, err error) 
|- return a locked file (0.tmp or 1.tmp) from fp.filec

- wal/encoder.go
func newEncoder(w io.Writer, prevCrc uint32, pageOffset int) *encoder {
	return &encoder{
		bw:  ioutil.NewPageWriter(w, walPageBytes, pageOffset),
		crc: crc.New(prevCrc, crcTable),
		// 1MB buffer
		buf:       make([]byte, 1024*1024),
		uint64buf: make([]byte, 8),
	}
}

func  (e *encoder) encode(rec *walpb.Record)
|- e.mu.Lock()
|- //set rec.Crc
|- data = rec.Marshal
|- lenField, padBytes := encodeFrameSize (len(data)), // padBytes: length to padding for 8 bytes alignment
|-                    // 64 bit: 1 bit : padding flag, 3 bit: padding length, 4 bit: not used, 56 bit: length
|- e.bw.Write (lenField)
|- e.bw.write (data)


- wal/decoder.go
type decoder struct {
	mu  sync.Mutex
	brs []*bufio.Reader

	// lastValidOff file offset following the last valid decoded record
	lastValidOff int64
	crc          hash.Hash32
}

func newDecorder (r...io.reader) *decoder {
    return &decoder {
        brs: readers ===> bufio.Reader (r)
        crc: crc.New(0, crcTable)
    }
}


// 貌似…… 每次调用decode就会读取一段Record，直到一个文件返回EOF，递归读下一个，当所有文件都到了结尾，返回EOF 
func (d *decoder) decode (rec *walpb.Record) 
|- rec.Reset () // WTF is this !!!,  hmm, rec were the return value ??? yes !!!
|- d.decodeRecord(rec) // a recursive func, TODO: but why?
|  |- l := readInt64(d.brs[0]) // read record length
|  |- recBytes, padBytes := decodeFrameSize (l) //recBytes: lower 56 bits, paBytes 
|  |- data := make([]byte, recBytes + padBytes)
|  |- io.readFull (d.brs[0], data)
|  |- rec.UnMarshal (data[:recBytes]) // check if isTornEntry()
|  |- isTornEntry (data)
|  |  |- slice data into minSectorSize Chunks, if any data for a sector chunk is all 0, it's a torn write
|  |  |- I get the idea, but how does this happen?
|  |- d.lastValidOff += frameSizeBytes + recBytes + padBytes