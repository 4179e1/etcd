type WAL struct {
	lg *zap.Logger

	dir string // the living directory of the underlay files

	// dirFile is a fd for the wal directory for syncing on Rename
	dirFile *os.File

	metadata []byte           // metadata recorded at the head of each WAL
	state    raftpb.HardState // hardstate recorded at the head of WAL

	start     walpb.Snapshot // snapshot to start reading
	decoder   *decoder       // decoder to decode records
	readClose func() error   // closer for decode reader

	mu      sync.Mutex
	enti    uint64   // index of the last entry saved to the wal
	encoder *encoder // encoder to encode records

	locks []*fileutil.LockedFile // the locked files the WAL holds (the name is increasing)
	fp    *filePipeline
}

func Create (lg *zap.Logger, dirpath string, metadata []byte) (*WAL, error)
|- Exist (dirpath)
|- tmpdirpath := filepath.Clean(dirpath) + ".tmp"
|- fileutil.CreateDirAll (tmpdirpath)
|- p := filepath.Join (tmpdirpath, walName(0, 0))
|- fileutil.LockFile (p, s.O_WRONLY|os.O_CREATE, fileutil.PrivateFileMode) // syscall.Flock()
|- f.Seek (0, io.SeekEnd) // for what?
|- fileutil.Preallocate(f.File, SegmentSizeBytes, true)